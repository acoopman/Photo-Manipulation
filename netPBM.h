/** ***************************************************************************
 * @file
 *
 * @brief header file for the entire project
 *****************************************************************************/

#include <iostream>
#include <fstream>
#include <vector>
#include <sstream>
#include <algorithm>
#include <iomanip>

using namespace std; 

#ifndef  __NETPBM__H__ 
#define  __NETPBM__H__ 


/** ***************************************************************************
* typedef named pixel, values from 0 - 256
******************************************************************************/
typedef unsigned char pixel; 

/** ***************************************************************************
* struct named image. Main struct used in the program
******************************************************************************/
struct image 
{ 
    int rows;     
    int cols;     
    pixel **redgray; // handles red channel or grayscale     
    pixel **green;     
    pixel **blue; 
}; 


//*****************************************************************************
//image Operations*************************************************************

/** ***************************************************************************
* negates the image(inverts color)
******************************************************************************/
void negate(image &info); 

/** ***************************************************************************
* brightens the image, takes in the user specified brighten value
******************************************************************************/
void brighten(image& info, int bright_value);

/** ***************************************************************************
* sharpens the image 
******************************************************************************/
bool sharpen(image& info);

/** ***************************************************************************
* blurs the image using a 3x3 kernal
******************************************************************************/
bool smooth(image& info); 

/** ***************************************************************************
* converts the image to grayscale
******************************************************************************/
bool grayscale(image& info);

/** ***************************************************************************
* contrats the grayscale image then adds contrast
******************************************************************************/
bool contrast(image& info); 


//memory***********************************************************************

/** ***************************************************************************
* allocates the memory for the 2D arrays
******************************************************************************/
pixel** alloc2d(int rows, int cols); 

/** ***************************************************************************
* frees up the memory that was allocated
******************************************************************************/
void free2d(pixel**& ptr, int rows); 


//Image File IO****************************************************************

/** ***************************************************************************
* closes all the given files
******************************************************************************/
void close_files(ifstream &in, ofstream &out); 

/** ***************************************************************************
*opens the inputed files
******************************************************************************/
void open_files(ifstream& in, ofstream& out, string input_name, 
    string output_name); 

/** ***************************************************************************
*inputes the data to the 2D arrays for both P6 and P3
******************************************************************************/
void input_data(image &info, ifstream& in, string input_type); 

/** ***************************************************************************
*outputs the data in the specified formats
******************************************************************************/
void output_data(image info, ofstream& out, string output_type, 
    string comment_line, int max_value); 


//other************************************************************************

/** ***************************************************************************
*skips over a line of data. FOR P6 ONLY
******************************************************************************/
void get_comment(ifstream& f); //skips over a line of data. FOR P6 ONLY


#endif